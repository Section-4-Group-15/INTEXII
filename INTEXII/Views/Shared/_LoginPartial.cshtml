@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@if (SignInManager.IsSignedIn(User))
{

    // If the user is an admin, display the admin tools
    @if (User.IsInRole("Admin"))
    {
        <li>
            <li class="dropdown">
                <a><span>Admin Tools</span> <i class="bi bi-chevron-down dropdown-indicator"></i></a>
                <ul>
                    <li><a asp-controller="Home" asp-action="AdminProducts">Manage Products</a></li>
                    <li><a asp-controller="Home" asp-action="AdminUsers">Manage Users</a></li>
                    <li><a asp-controller="Home" asp-action="AdminOrders">Manage Orders</a></li>
                </ul>
            </li>
        </li>
    }

    // Give the name of the user and link to account management
    <li>
        <a id="manage" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>

    // Give the option to logout
    <li>
        <form id="logoutForm" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li><a id="register" asp-area="Identity" asp-page="/Account/Register">Register</a></li>
    <li><a id="login" asp-area="Identity" asp-page="/Account/Login">Login</a></li>
}

